    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=localhost,1430;Initial Catalog=OnionArchitecture_Db;User ID=sa;Password=admin1234@;Connect Timeout=30;Encrypt=False;Trust Server Certificate=False;Application Intent=ReadWrite;Multi Subnet Failover=False");

    public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
   

        foreach (var entry in ChangeTracker.Entries<BaseEntity>())
        {
            if (entry.Entity is Product entity)
            {
                if (entry.State == EntityState.Added)
                {
                 
                    entity.CreateDate = DateTime.UtcNow;
                }


                if (entry.State == EntityState.Modified)
                {
                  
                    entity.UpdateDate = DateTime.UtcNow;
                }

                if (entry.State == EntityState.Deleted)
                {
                    
                    entity.DeleteDate = DateTime.UtcNow;
                }
            }

            if (entry.Entity is Customer entity2)
            {
                if (entry.State == EntityState.Added)
                {

                    entity2.CreateDate = DateTime.UtcNow;
                }


                if (entry.State == EntityState.Modified)
                {

                    entity2.UpdateDate = DateTime.UtcNow;
                }

                if (entry.State == EntityState.Deleted)
                {

                    entity2.DeleteDate = DateTime.UtcNow;
                }
            }

            if (entry.Entity is Order entity3)
            {
                if (entry.State == EntityState.Added)
                {

                    entity3.CreateDate = DateTime.UtcNow;
                }


                if (entry.State == EntityState.Modified)
                {

                    entity3.UpdateDate = DateTime.UtcNow;
                }

                if (entry.State == EntityState.Deleted)
                {

                    entity3.DeleteDate = DateTime.UtcNow;
                }
            }
        }


      

        return await base.SaveChangesAsync(cancellationToken);
    }




public partial class Product : BaseEntity
{
    public Guid Id { get; set; }

    public string Name { get; set; } = null!;

    public int Stock { get; set; }

    public double Price { get; set; }

    public DateTime Createdate { get; set; }

    public DateTime Updatedate { get; set; }

    public DateTime Deletedate { get; set; }

    public virtual ICollection<Order> Orders { get; set; } = new List<Order>();
}