// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Domain.Entities.Common;
using Domain.Entities.Models;
using Microsoft.EntityFrameworkCore;

namespace Persistence.Contexts;

public partial class OnionArchitecture_DbContext : DbContext
{
    public OnionArchitecture_DbContext()
    {
    }

    public OnionArchitecture_DbContext(DbContextOptions<OnionArchitecture_DbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Customer> Customer { get; set; }

    public virtual DbSet<Order> Order { get; set; }

    public virtual DbSet<Product> Product { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=localhost,1430;Initial Catalog=OnionArchitecture_Db;User ID=sa;Password=admin1234@;Connect Timeout=30;Encrypt=False;Trust Server Certificate=False;Application Intent=ReadWrite;Multi Subnet Failover=False");

    public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {


        foreach (var entry in ChangeTracker.Entries<BaseEntity>())
        {
            if (entry.Entity is Product entity)
            {
                if (entry.State == EntityState.Added)
                {

                    entity.CreateDate = DateTime.UtcNow;
                }


                if (entry.State == EntityState.Modified)
                {

                    entity.UpdateDate = DateTime.UtcNow;
                }

                if (entry.State == EntityState.Deleted)
                {

                    entity.DeleteDate = DateTime.UtcNow;
                }
            }

            if (entry.Entity is Customer entity2)
            {
                if (entry.State == EntityState.Added)
                {

                    entity2.CreateDate = DateTime.UtcNow;
                }


                if (entry.State == EntityState.Modified)
                {

                    entity2.UpdateDate = DateTime.UtcNow;
                }

                if (entry.State == EntityState.Deleted)
                {

                    entity2.DeleteDate = DateTime.UtcNow;
                }
            }

            if (entry.Entity is Order entity3)
            {
                if (entry.State == EntityState.Added)
                {

                    entity3.CreateDate = DateTime.UtcNow;
                }


                if (entry.State == EntityState.Modified)
                {

                    entity3.UpdateDate = DateTime.UtcNow;
                }

                if (entry.State == EntityState.Deleted)
                {

                    entity3.DeleteDate = DateTime.UtcNow;
                }
            }
        }




        return await base.SaveChangesAsync(cancellationToken);
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Customer__3214EC0760BF7BE7");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Order__3214EC071FBB6D64");

            entity.HasOne(d => d.CustomerId_forOrderNavigation).WithMany(p => p.Order).HasConstraintName("FK_CustomerId_forOrder");

            entity.HasOne(d => d.ProductId_forOrderNavigation).WithMany(p => p.Order).HasConstraintName("FK_ProductId_forOrder");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Product__3214EC0765057756");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}