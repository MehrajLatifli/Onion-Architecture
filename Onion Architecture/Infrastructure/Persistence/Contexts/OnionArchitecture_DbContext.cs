// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Domain.Entities.Models;
using Microsoft.EntityFrameworkCore;
using Persistence;

namespace Persistence.Contexts;

public partial class OnionArchitecture_DbContext : DbContext
{
    public OnionArchitecture_DbContext()
    {
    }

    public OnionArchitecture_DbContext(DbContextOptions<OnionArchitecture_DbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Customer> Customer { get; set; }

    public virtual DbSet<Order> Order { get; set; }

    public virtual DbSet<Product> Product { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
            => optionsBuilder.UseNpgsql(ConfigurationSQL.PostgreSQLConnectionString);

    public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
    {
        var P = ChangeTracker.Entries<Product>();

        foreach (var entry in P)
        {
            if (entry.Entity is Product entity)
            {
                if (entry.State == EntityState.Added)
                {
                    entity.id = Guid.NewGuid();
                    entity.createdate = DateTime.UtcNow;
                }


                if (entry.State == EntityState.Modified)
                {
                    entry.State = EntityState.Modified;
                    entity.updatedate = DateTime.UtcNow;
                }

                if (entry.State == EntityState.Deleted)
                {
                    entry.State = EntityState.Deleted;
                    entity.deletedate = DateTime.UtcNow;
                }
            }
        }

        var C = ChangeTracker.Entries<Customer>();

        foreach (var entry in C)
        {
            if (entry.Entity is Customer entity)
            {
                if (entry.State == EntityState.Added)
                {
                    entity.id = Guid.NewGuid();
                    entity.createdate = DateTime.UtcNow;
                }


                if (entry.State == EntityState.Modified)
                {
                    entry.State = EntityState.Modified;
                    entity.updatedate = DateTime.UtcNow;
                }

                if (entry.State == EntityState.Deleted)
                {
                    entry.State = EntityState.Deleted;
                    entity.deletedate = DateTime.UtcNow;
                }
            }
        }

        var O = ChangeTracker.Entries<Order>();

        foreach (var entry in O)
        {
            if (entry.Entity is Order entity)
            {
                if (entry.State == EntityState.Added)
                {
                    entity.id = Guid.NewGuid();
                    entity.createdate = DateTime.UtcNow;
                }


                if (entry.State == EntityState.Modified)
                {
                    entry.State = EntityState.Modified;
                    entity.updatedate = DateTime.UtcNow;
                }

                if (entry.State == EntityState.Deleted)
                {
                    entry.State = EntityState.Deleted;
                    entity.deletedate = DateTime.UtcNow;
                }
            }
        }

        return await base.SaveChangesAsync(cancellationToken);
    }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasPostgresExtension("uuid-ossp");

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.id).HasName("Customer_pkey");

            entity.Property(e => e.id).HasDefaultValueSql("uuid_generate_v4()");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.id).HasName("Order_pkey");

            entity.Property(e => e.id).HasDefaultValueSql("uuid_generate_v4()");

            entity.HasOne(d => d.customerid_fororderNavigation).WithMany(p => p.Order).HasConstraintName("fk_customerid_fororder");

            entity.HasOne(d => d.productid_fororderNavigation).WithMany(p => p.Order).HasConstraintName("fk_productid_fororder");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.id).HasName("Product_pkey");

            entity.Property(e => e.id).HasDefaultValueSql("uuid_generate_v4()");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}